import tester.Tester;

/*
TEMPLATE
--------
Fields:
... this.name ...                          -- String
... this.features ...                      -- ILoFeature
Methods:
... this.totalCapacity() ...               -- int
... this.foodinessRating() ...             -- int
... this.sumRatings() ...                  -- double
... this.countRestaurants() ...            -- int
... this.restaurantInfo() ...              -- String
Methods for fields:
... this.features.totalCapacity() ...      -- int
... this.features.sumRatings() ...         -- int
... this.features.countRestaurants() ...   -- int
*/
class Place {
  String name;
  ILoFeature features;

  Place(String name, ILoFeature features) {
    this.name = name;
    this.features = features;
  }

  // counts the total available seating in all venues reachable from this place
  int totalCapacity() {
    //return this.features.totalCapacityAcc( new MtLoFeature() );
    return this.collectUnique( new MtLoFeature() ).totalCapacity();
  }
  
  // return total ratings of features
  double sumRatings() {
    return this.collectUnique( new MtLoFeature() ).sumRatings();
  }

  // return number of restaurants
  int countRestaurants() {
    return this.collectUnique( new MtLoFeatur() ).countRestaurants();
  }


  // calculates average ratings for all reachable restaurants' rating
  double foodinessRating() {
    if (this.countRestaurants() == 0) {
      return 0;
    } else {
      return this.sumRatings() / this.countRestaurants();
    }
  }

  // returns restaurants' information
  String restaurantInfo() {
    // to represent the string with extra ", " at the end.
    String unfixed = this.collectUnique(new MtLoFeature()).restaurantInfo();
    if (unfixed.length() == 0) {
      return unfixed;
    } else {
      // to clip off the excess tail
      return unfixed.substring(0, unfixed.length() - 2);
    }
  }

  // collects all unique entries of venues and restaurants reachable from here.
  ILoFeature collectUnique( ILoFeature seen ) {
    return this.features.collectUnique(seen);
  }
}

interface IFeature {
  // to compute the capacity of feature
  int capacity();
  // ACCUMULATOR: seen represents all venues seen already
  int capacityAcc( ILoFeature seen );
  
  // to retreive the ratings of this feature
  double getRating();
  // ACCUMULATOR: seen represents all restaurants seen already
  double getRatingAcc( ILoFeature seen );
  
  // to compute the number of restaurants
  int countRestaurant();
  // ACCUMULATOR: seen represents all restaurants seen already
  int countRestaurantAcc( ILoFeature seen );

  // to get the information (if it is a restaurant) of this feature
  String restaurantInfo();
  // ACCUMULATOR: seen represents all restaurant seen already
  String restaurantInfoAcc( ILoFeature seen );
  
  ILoFeature collectReachable();
}

/*
 * TEMPLATE: 
 * --------- 
 * Fields: 
 * ... this.name ...                 -- String 
 * ... this.type ...                 -- String 
 * ... this.averageRating ...        -- double 
 * Methods: 
 * ... this.capacity() ...           -- int 
 * ... this.getRating() ...          -- double 
 * ... this.countRestaurant() ...    -- int 
 * ... this.restaurantInfo() ...     -- String
 */
// To represent a restaurant
class Restaurant implements IFeature {
  String name;
  String type;
  double averageRating;

  Restaurant(String name, String type, double rating) {
    this.name = name;
    this.type = type;
    this.averageRating = rating;
  }

  // return capacity
  public int capacity() {
    return 0;
  }
  public int capacityAcc( ILoFeature seen ) {
    return 0;
  }

  // return rating
  public double getRating() {
    return this.averageRating;
  }
  
  public double getRatingAcc( ILoFeature seen ) {
    if(seen.isMember(this)) {
      return 0;
    } else {
      return this.averageRating;
    }
  }

  // return number of restaurant
  public int countRestaurant() {
    return 1;
  }
  
  public int countRestaurantAcc( ILoFeature seen ) {
    if(seen.isMember(this)) {
      return 0;
    } else {
      return 1;
    }
  }

  // return information of this restaurant
  public String restaurantInfo() {
    return this.name + " (" + this.type + "), ";
  }
  
  public String restaurantInfoAcc( ILoFeature seen ) {
    if(seen.isMember(this)) {
      return "";
    } else {
      return this.name + " (" + this.type + "), ";
    }
  }
  
  public ILoFeature collectReachable() {
    return new ConsLoFeature(this, new MtLoFeature());
  }
  
}

/*
 * TEMPLATE: 
 * --------- 
 * Fields: 
 * ... this.name ...                  -- String 
 * ... this.type ...                  -- String 
 * ... this.capacity ...              -- int 
 * Methods: 
 * ... this.capacity() ...            -- int
 * ... this.getRating() ...           -- double 
 * ... this.countRestaurant() ...     -- int 
 * ...this.restaurantInfo() ...       -- String
 */
// to represent a venue
class Venue implements IFeature {
  String name;
  String type;
  int capacity;

  Venue(String name, String type, int capacity) {
    this.name = name;
    this.type = type;
    this.capacity = capacity;
  }

  // count capacity
  public int capacity() {
    return this.capacity;
  }
  
  public int capacityAcc( ILoFeature seen ) {
    if(seen.isMember(this)) {
      return 0;
    } else {
      return this.capacity;
    }
  }

  // return rating
  public double getRating() {
    return 0;
  }
  public double getRatingAcc( ILoFeature seen ) {
    return 0;
  }

  // return number of restaurant
  public int countRestaurant() {
    return 0;
  }
  public int countRestaurantAcc( ILoFeature seen ) {
    return 0;
  }

  // return the information
  public String restaurantInfo() {
    return "";
  }
  public String restaurantInfoAcc( ILoFeature seen ) {
    return "";
  }
  public ILoFeature collectReachable() {
    return new ConsLoFeature(this, new MtLoFeature());
  }
  
}

/*
 * TEMPLATE 
 * -------- 
 * Fields: 
 * ... this.name ...                      -- String 
 * ... this.destination...                -- Place 
 * Methods: 
 * ... this.capacity() ...                -- int 
 * ... this.getRating() ...               -- double 
 * ... this.countRestaurant() ...         -- int 
 * ... this.restaurantInfo() ...          -- String 
 * Methods for fields: 
 * ... this.destination.totalCapacity() ...   -- int
 * ... this.destination.sumRatings() ...      -- double 
 * ... this.destination.countRestaunts() ...  -- int 
 * ... this.destination.restaurantInfo() ...  -- String
 */
// to represent shuttle bus
class ShuttleBus implements IFeature {
  String name;
  Place destination;

  ShuttleBus(String name, Place destination) {
    this.name = name;
    this.destination = destination;
  }

  // return capacity
  public int capacity() {
    return destination.totalCapacity();
  }
  
  public int capacityAcc( ILoFeature seen ) {
    return destination.totalCapacityAcc( seen );
  }

  // return rating
  public double getRating() {
    return destination.sumRatings();
  }
  public double getRatingAcc( ILoFeature seen ) {
    return destination.sumRatingsAcc( seen );
  }

  // return number of restaurant
  public int countRestaurant() {
    return destination.countRestaurants();
  }
  public int countRestaurantAcc( ILoFeature seen ) {
    return destination.countRestaurantsAcc(seen);
  }

  // return information
  public String restaurantInfo() {
    return destination.restaurantInfo() + ", ";
  }
  
  public String restaurantInfoAcc( ILoFeature seen ) {
    return destination.restaurantInfoAcc(seen) + ", ";
  }
  
  public ILoFeature collectReachable() {
    return destination.collectUnique( new MtLoFeature() );
  }
}

interface ILoFeature {
  // compute the total capacity of all reachable venues in the list
  int totalCapacity();
  // ACCUMULATOR: seen represents all the venues seen already
  int totalCapacityAcc( ILoFeature seen );
  
  // compute the sum of the ratings of all reachable restaurants in the list
  double sumRatings();
  // ACCUMULATOR: seen represents all the restaurants seen already
  double sumRatingsAcc(ILoFeature seen);

  // compute the number of reachable restaurants
  int countRestaurants();
  // ACCUMULATOR: seen represents all the restaurants seen already
  int countRestaurantsAcc(ILoFeature seen);
  
  // describe all the reachable restaurants.
  String restaurantInfo();
  // ACCUMULATOR: seen represents all the restaurants seen already
  String restaurantInfoAcc(ILoFeature seen);
  
  // determins if other is part of this list.
  boolean isMember( IFeature other );
  
  ILoFeature collectUnique( ILoFeature seen );
  ILoFeature appendUnique( ILoFeature other );
} 

/*
 * TEMPLATE 
 * -------- 
 * Methods: 
 * ... this.totalCapacity() ...           -- int 
 * ... this.sumRatings() ...              -- double 
 * ... this.countRestaurants() ...        -- int 
 * ... this.restaurantInfo() ...          -- String
 */
// to represent empty list of feature
class MtLoFeature implements ILoFeature {
  public int totalCapacity() {
    return 0;
  }
  
  public int totalCapacityAcc( ILoFeature seen ) {
    return 0;
  }

  //return ratings
  public double sumRatings() {
    return 0.0;
  }
  
  public double sumRatingsAcc( ILoFeature seen ) {
    return 0;
  }

  // return number of restaurant
  public int countRestaurants() {
    return 0;
  }
  
  public int countRestaurantsAcc( ILoFeature seen ) {
    return 0;
  }

  //return information
  public String restaurantInfo() {
    return "";
  }
  
  public String restaurantInfoAcc( ILoFeature seen ) {
    return "";
  }
  
  public boolean isMember( IFeature other ) {
    return false;
  }
  
  public ILoFeature collectUnique( ILoFeature seen ) {
    return seen;
  }
  public ILoFeature appendUnique( ILoFeature other ) {
    return other;
  }
}

/*
 * TEMPLATE 
 * -------- 
 * Fields: 
 * ... this.first ...                 -- IFeature 
 * ... this.rest ...                  -- ILoFeature 
 * Methods: 
 * ... this.totalCapacity() ...       -- int 
 * ... this.sumRatings() ...          -- double 
 * ... this.countRestaurants() ...    -- int 
 * ... this.restaurantInfo() ...      -- String 
 * Methods for fields: 
 * ... this.first.capacity() ...      -- int 
 * ... this.first.getRating() ...     -- double 
 * ... this.first.getRestaurant() ... -- int 
 * ... this.rest.totalCapacity() ...  -- int 
 * ... this.rest.getRatings() ...     -- double 
 * ... this.rest.getRestaurants() ... -- int 
 * ... this.rest.restaurantInfo() ... -- String
 */
// to represent non-empty list of features
class ConsLoFeature implements ILoFeature {
  IFeature first;
  ILoFeature rest;

  ConsLoFeature(IFeature first, ILoFeature rest) {
    this.first = first;
    this.rest = rest;
  }

  // return total capacity
  public int totalCapacity() {
    return (this.first.capacity() + this.rest.totalCapacity());
  }
  
  public int totalCapacityAcc( ILoFeature seen ) {
    return this.first.capacityAcc(seen) + this.rest.totalCapacityAcc(new ConsLoFeature(this.first, seen)) ;
  }

  // return total ratings
  public double sumRatings() {
    return this.first.getRating() + this.rest.sumRatings();
  }
  
  public double sumRatingsAcc( ILoFeature seen ) {
    return this.rest.sumRatingsAcc(new ConsLoFeature(this.first, seen)) 
         + this.first.getRatingAcc(seen);
  }

  // return number of restaurants
  public int countRestaurants() {
    return this.first.countRestaurant() + this.rest.countRestaurants();
  }
  
  public int countRestaurantsAcc( ILoFeature seen ) {
    return this.rest.countRestaurantsAcc(new ConsLoFeature(this.first, seen)) 
         + this.first.countRestaurantAcc(seen);
  }

  // return all restaurants' information
  public String restaurantInfo() {
    return this.first.restaurantInfo() + this.rest.restaurantInfo();
  }
  
  public String restaurantInfoAcc( ILoFeature seen ) {
    return this.first.restaurantInfoAcc(seen) 
         + this.rest.restaurantInfoAcc(new ConsLoFeature(this.first, seen));
 
  }
  public boolean isMember(IFeature other) {
    return this.first.equals(other) || this.rest.isMember(other);
  }
  
  public ILoFeature collectUnique( ILoFeature seen ) {
    return this.rest.collectUnique(this.first.collectReachable().appendUnique(seen));
  }
  public ILoFeature appendUnique( ILoFeature other ) {
    if( other.isMember(this.first) ) {
      return this.rest.appendUnique(other);
    } else {
      return new ConsLoFeature( this.first, this.rest.appendUnique(other) );
    }
  }
}

class ExamplesUniquePlaces {
  ILoFeature mtLoFeature = new MtLoFeature();

  IFeature tdGarden = new Venue("TD Garden", "stadium", 19580);
  IFeature mikePastry = new Restaurant("Mike's Pastry", "cannolis", 4.3);
  ILoFeature neFeatures = new ConsLoFeature(tdGarden, new ConsLoFeature(mikePastry, mtLoFeature));
  Place northEnd = new Place("North End", neFeatures);

  IFeature freshman15 = new ShuttleBus("Freshmen-15", northEnd);
  IFeature legalSea = new Restaurant("Legal Sea Foods", "seafood", 3.9);
  IFeature harvardStadium = new Venue("Harvard Stadium", "football", 30323);
  ILoFeature harvardFeatures = new ConsLoFeature(freshman15,
      new ConsLoFeature(legalSea, new ConsLoFeature(harvardStadium, mtLoFeature)));
  Place harvard = new Place("Harvard", harvardFeatures);

  IFeature northEndShuttle = new ShuttleBus("Little Italy Express", northEnd);
  IFeature auntieAnnes = new Restaurant("Auntie Anne's", "pretzels", 4.0);
  IFeature harvardShuttle = new ShuttleBus("Crimson Cruiser", harvard);
  IFeature bostonCommon = new Venue("Boston Common", "public", 150000);
  ILoFeature southStationFeatures = new ConsLoFeature(northEndShuttle,
      new ConsLoFeature(auntieAnnes,
          new ConsLoFeature(harvardShuttle, new ConsLoFeature(bostonCommon, mtLoFeature))));
  Place southStation = new Place("South Station", southStationFeatures);

  IFeature quiznos = new Restaurant("Quiznos", "sandwiches", 3.2);
  IFeature starbucks = new Restaurant("Starbucks", "coffee", 4.1);
  IFeature airportShuttle = new ShuttleBus("airport shuttle", southStation);
  ILoFeature loganAirportFeatures = new ConsLoFeature(quiznos,
      new ConsLoFeature(starbucks, new ConsLoFeature(airportShuttle, mtLoFeature)));
  Place loganAirport = new Place("Logan airport", loganAirportFeatures);
  
  //double temp = loganAirport.foodinessRating();
  int temp2 = loganAirport.totalCapacity();
  //String temp3 = loganAirport.restaurantInfo();
  
  
  
  /*
  // check for foodinessRating()
  boolean testFoodinessRating(Tester t) {
    return t.checkInexact(loganAirport.foodinessRating(), 3.967, 0.01)
        && t.checkInexact(northEnd.foodinessRating(), 4.3, 0.01)
        && t.checkInexact(harvard.foodinessRating(), 4.1, 0.01);
  }

  // check for totalCapacity
  boolean testTotalCapacity(Tester t) {
    return t.checkExpect(northEnd.totalCapacity(), 19580)
        && t.checkExpect(harvard.totalCapacity(), 49903)
        && t.checkExpect(loganAirport.totalCapacity(), 219483)// counts tdGarden twice
        && t.checkExpect(southStation.totalCapacity(), 219483);// counts tdGarden twice
  }

  // check for restaurantInfo()
  boolean testRestaurantInfo(Tester t) {
    String loganString = "Quiznos (sandwiches), Starbucks (coffee), "
        + "Mike's Pastry (cannolis), Auntie Anne's (pretzels), "
        + "Mike's Pastry (cannolis), Legal Sea Foods (seafood)";
    return t.checkExpect(northEnd.restaurantInfo(), "Mike's Pastry (cannolis)")
        && t.checkExpect(harvard.restaurantInfo(),
            "Mike's Pastry (cannolis), Legal Sea Foods (seafood)")
        && t.checkExpect(loganAirport.restaurantInfo(), loganString);
  }
  */

  /*
   * Describe contents of map and design data representation
   * Example Map: Place called New York City, it has two ShuttleBuses: one is the
   * 7 Train that takes you to Flushing; the other is the N Train that takes you
   * to Chinatown. Flushing (which is a Place) has a Venue called Citi Field, a
   * stadium with a capcity of 45000. It also has two ShuttleBuses, the Q26 and
   * Q17, that both take you to Fresh Meadows. Chinatown (which is a Place) has a
   * Restaurant called Wok Wok, with a rating of 4.9, and primarily serves Asian
   * cuisine. Fresh Meadows also has a Restaurant, called Apple Bees, with a
   * rating of 3.5, and primarily serves fast food.
   */
  /*
  IFeature appleBees = new Restaurant("Apple Bees", "fast food", 3.5);
  ILoFeature fmFeatures = new ConsLoFeature(appleBees, mtLoFeature);
  Place freshMeadows = new Place("Fresh Meadows", fmFeatures);
  IFeature citiField = new Venue("Citi Field", "stadium", 45000);
  IFeature q26 = new ShuttleBus("Q26", freshMeadows);
  IFeature q17 = new ShuttleBus("Q17", freshMeadows);
  ILoFeature flFeatures = new ConsLoFeature(citiField,
      new ConsLoFeature(q26, new ConsLoFeature(q17, mtLoFeature)));
  Place flushing = new Place("Flushing", flFeatures);
  IFeature wokWok = new Restaurant("Wok Wok", "asian cuisine", 4.9);
  ILoFeature ctFeatures = new ConsLoFeature(wokWok, mtLoFeature);
  Place chinaTown = new Place("ChinaTown", ctFeatures);
  IFeature sevenTrain = new ShuttleBus("7 Train", flushing);
  IFeature nTrain = new ShuttleBus("N Train", chinaTown);
  ILoFeature mta = new ConsLoFeature(sevenTrain, new ConsLoFeature(nTrain, mtLoFeature));
  Place nyc = new Place("New York City", mta);

  */
  
  /*
   * Explanation for double-counting information
   * ---------------------------------------------- Whenever South Station is
   * referenced, it visits the NorthEnd twice: once from South Station itself, and
   * a second time from Harvard via ShuttleBus. This means that the
   * restaurantInfo, totalCapacity, and foodinessRating methods will double count
   * the features from North End.
   */
}