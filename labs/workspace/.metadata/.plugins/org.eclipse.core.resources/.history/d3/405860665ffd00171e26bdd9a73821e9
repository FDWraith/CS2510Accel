import tester.Tester;

interface IPicture {
  int getWidth();
  int countShapes();
  int comboDepth();
  int comboDepthAcc( int soFar );
}

/*
 * TEMPLATE
 * ---------
 * Fields:
 * ... this.kind ...                -- String
 * ... this.size ...                -- int
 * Methods:
 * ... this.getWidth() ...          -- int
 */
class Shape implements IPicture {
  String kind;
  int size; // width = height
  
  Shape(String kind, int size) {
    this.kind = kind;
    this.size = size;
  }
  
  public int getWith() {
    return size;
  }
  public int countShapes() {
    return 1;
  }
  public int comboDepth() {
    return 1;
  }
  public int comboDepth( int soFar ) {
    return soFar + 1;
  }
}

/*
 * TEMPLATE
 * ----------
 * Fields:
 * ... this.name ...                          -- String
 * ... this.operation ...                     -- IOperation
 * Methods:
 * ... this.getWidth() ...                    -- int
 * Methods for fields:
 * ... this.operation.getWidth() ...          -- int
 */
class Combo implements IPicture {
  String name;
  IOperation operation;
  
  Combo(String name, IOperation operation) {
    this.name = name;
    this.operation = operation;
  }
  
  public int getWidth() {
    return this.operation.getWidth();
  }
  public int countShapes() {
    return this.operation.countShapes();
  }
}

interface IOperation {
  int getWidth();
  int countShapes();
}

/*
 * FIELDS:
 * ... this.picture ...                -- IPicture
 * METHODS:
 * ... this.getWidth() ...             -- int
 * METHODS ON FIELDS:
 * ... ...
 */
// Doubles the Size of a picture
class Scale implements IOperation {
  IPicture picture;
  
  Scale( IPicture pic ) {
    this.picture = pic;
  }
  
  public int getWidth() {
    return 0;
  }
  public int countShapes() {
    return this.picture.countShapes();
  }
}

/*
 * FIELDS:
 * ... this.picture1 ...               -- IPicture
 * ... this.picutre2 ...               -- IPicture
 * METHODS:
 * ... this.getWidth() ...             -- int
 * METHODS ON FIELDS:
 * ... ...
 */
// Places picture2 to the right of picture1
class Beside implements IOperation {
  IPicture picture1;
  IPicture picture2;
  
  Beside( IPicture picture1, IPicture picture2 ) {
    this.picture1 = picture1;
    this.picture2 = picture2;
  }
  
  public int getWidth() {
    return 0;
  }
  public int countShapes() {
    return this.picture1.countShapes() + this.picture2.countShapes();
  }
}

/*
 * FIELDS:
 * ... this.topPicture ...             -- IPicture
 * ... this.bottomPicture ...          -- IPicture
 * METHODS:
 * ... this.getWidth() ...             -- int
 * METHODS ON FIELDS:
 * ... ...
 */
// Places 
class Overlay implements IOperation {
  IPicture topPicture;
  IPicture bottomPicture;
  
  Overlay( IPicture topPicture, IPicture bottomPicture ) {
    this.topPicture = topPicture;
    this.bottomPicture = bottomPicture;
  }
  
  public int getWidth() {
    return 0;
  }
  public int countShapes() {
    return this.topPicture.countShapes() + this.bottomPicture.countShapes();
  }
} 

class ExamplesPicture {
  
  // Given example
  IPicture circle = new Shape("circle",20);
  IPicture square = new Shape("square",30);
  IPicture bigCircle = new Combo("big circle", new Scale(circle));
  IPicture squareOnCircle = new Combo ("square on circle", new Overlay(square,bigCircle));
  IPicture doubledSquareOnCircle = new Combo ("double square on circle", new Beside(squareOnCircle,squareOnCircle));

  // Our example 
  IPicture extraSquare = new Shape( "square", 40 );
  IPicture extraCircle = new Shape( "circle", 50 );
  IPicture bigSquare = new Combo( "big square", new Scale(extraSquare) );
  IPicture dotInSquare = new Combo( "dot in big square", new Overlay(extraCircle, bigSquare) );
  IPicture dotInSquareWithSmallSquare = new Combo( "dot in big square next to small square", new Beside(dotInSquare, extraSquare) );
  
  // to test countShapes() 
  boolean testCountShapes( Tester t ) {
    return t.checkExpect(extraSquare.countShapes(), 1)
        && t.checkExpect(bigCircle.countShapes(), 1)
        && t.checkExpect(dotInSquare.countShapes(), 2)
        && t.checkExpect(dotInSquareWithSmallSquare.countShapes(), 3);
  }
  
  
  
} 